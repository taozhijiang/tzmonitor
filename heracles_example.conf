//  LOG_EMERG   0   /* system is unusable */
//	LOG_ALERT	1	/* action must be taken immediately */
//	LOG_CRIT	2	/* critical conditions */
//	LOG_ERR		3	/* error conditions */
//	LOG_WARNING	4	/* warning conditions */
//	LOG_NOTICE	5	/* normal but significant condition */
//	LOG_INFO	6	/* informational */
//	LOG_DEBUG	7	/* debug-level messages */

log_level = 6;
log_path  = "./log";

version = "3.1.1";

rpc = {

network = {

    bind_addr = "0.0.0.0";
    bind_port = 8435;
    safe_ip   = "";               // [D] 客户端访问白名单，逗号分割
    backlog_size = 10;


    io_thread_pool_size = 5;      // 工作线程组数目
    session_cancel_time_out = 60; // [D] 会话超时的时间
    ops_cancel_time_out = 10;   // [D] 异步IO操作超时时间，使用会影响性能(大概20%左右)

    // 注意，这里只是向tzhttpd借鉴过来的，对于长连接其实是没有效果的，
    // 只有短连接的请求，请求数目和初始建立连接的数目才相同
    // 流控相关
    service_enable = true;      // [D] 是否允许服务
    service_speed  = 0;           // [D] 每1sec允许服务的数目(tps)，0表示不限制

    service_concurrency = 0;      // [D] 最大并发连接数的限制
    
    send_max_msg_size = 0;           // [D] 最大消息体尺寸(不包括Header)
    recv_max_msg_size = 0;           // [D] 最大消息体尺寸(不包括Header)
};

// 类似于http的vhost，对每个服务族进行单独设置，资源相互隔离
// 但是不支持服务的动态加载，而且每个服务必须要在此处有条目，否则会初始化失败
services = (
    {
        instance_name = "MonitorTaskService";
        exec_thread_pool_size = 3;              // [D] 启动默认线程数目
        exec_thread_pool_size_hard = 5;         // [D] 容许突发最大线程数
        exec_thread_pool_step_size = 10;        // [D] 促发resize的queue_step

    }
);

// Business Core
business = {

    // 主要是入库操作，所以理论不需要特别大
    support_process_task_size = 5; // 服务端最大开辟的额外处理数据线程数目(共享)

    // 业务相关的配置
    services = (
        {
            // 默认的服务模板
            service_name = "[default]";

            support_process_step_size = 10;  // [D]

            event_linger = 10;      // [D] 多少秒的处理延时，滞后的上报被丢弃
            event_step   = 3;       // [D] 压缩多长时间内的时间段进行统计

            store_type = "leveldb";   // mysql, leveldb, redis...
        }
    );

    // 数据库连接信息
    mysql = {
        host_addr = "127.0.0.1";
        host_port = 3306;
        username = "root";
        passwd = "1234";
        database = "heracles";
        table_prefix = "t_heracles";   // heracles.t_heracles__<service>__events_201902
        conn_pool_size = 30;
    };

    leveldb = {
        filepath = "./leveldb_store";   // leveldb 的存储目录
        table_prefix = "t_heracles";   // t_heracles__<service>__events_201902
    };

};



// 客户端配置信息
monitor_client = {

    serv_addr = "127.0.0.1";
    serv_port = 8435;

    send_max_msg_size = 0;      // [D] 最大消息体尺寸(不包括Header)，0为无限制
    recv_max_msg_size = 0;      // [D] 最大消息体尺寸(不包括Header)

    ops_cancel_time_out = 0;    // [D] 客户端网络操作的超时设置，0为无限制

    report_enabled = true;      // [D] 是否执行数据收集和服务端上报，关闭后对业务零负载
    report_queue_limit = 300;   // [D] 待提交队列超过多长后，进行旧数据的truncate丢弃，0为没有限制
                                //     建议设置，因为可能服务原因导致提交速度慢，会堆积在本地占用大量的内存
    size_per_report = 5000;     // [D] 单个提交请求最多的事件数目，值大的时候可以提高吞吐量，
                                //     但是也要考虑RPC最大报文负载
};

}; // end rpc


// for http-face

http = {

    bind_addr = "0.0.0.0";
    bind_port = 8436;

    safe_ip   = "";  // [D] 客户端访问白名单
    backlog_size = 10;


    io_thread_pool_size = 1;    // 工作线程组数目

    session_cancel_time_out = 60; // [D] 会话超时的时间
    ops_cancel_time_out = 10;   // [D] 异步IO操作超时时间，使用会影响性能(大概20%左右)

    // 流控相关
    service_enable = true;      // [D] 是否允许服务
    service_speed  = 0;         // [D] 每1sec允许服务的数目，0表示不限制

    service_concurrency = 0;    // [D] 最大并发连接数的限制    

    // 不支持动态加载虚拟主机，需要显式进行注册才生效
    vhosts = (
    {
        server_name = "[default]";
        docu_root   = "/var/www/html/";
        docu_index  = "index.html;index.htm;index";

        exec_thread_pool_size = 2;              // [D] 启动默认线程数目
        exec_thread_pool_size_hard = 5;         // [D] 容许突发最大线程数
        exec_thread_pool_step_size = 100; // [D] 默认resize线程组的数目

        // support Content-Encoding: gzip, deflate
        compress_control = ".xml;.txt;.html;.htm;.js";
    }
    );

}; // end http
